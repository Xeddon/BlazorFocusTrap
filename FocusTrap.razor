@inject IJSRuntime Js
@implements IAsyncDisposable

<div id="blazorFocusTrap" @attributes="Attributes">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
</div>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> Attributes { get; set; }

    public IList<string> FocusElementList { get; } = new List<string> { "#blazorFocusTrap" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await Js.InvokeVoidAsync("blazorFocusTrap.start", FocusElementList);
    }

    public async ValueTask DisposeAsync()
    {
        await Js.InvokeVoidAsync("blazorFocusTrap.stop");
    }
}